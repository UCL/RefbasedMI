#browser()
miss_count <- length(c_mata_miss)
mata_means <- as.data.frame(mata_Means)
for (b in 1:miss_count)  {
# if 1st col missing then no value before so need to check for that
# note mimix counter just no rows in each patt
# so main looping is over missin fields, ie miss_count
# if 1st col must be ref
if (c_mata_miss[b] ==1) {
#print will cause objectto return
#print(paste0(miss_count))
#for each patt_count (from mimix_group)
#test purposes
#count<-2
# MeansC is list so use [[1]]
mata_means[b] <- MeansC[[1]][b]
} else  {
#filling in column at a time
# mata_means[c_mata_miss[b]] = mata_means[(c_mata_miss[b]-1)]+ Kd*( MeansC[[1]][(c_mata_miss[b])]- MeansC[[1]][(c_mata_miss[b])-1])
mata_means[c_mata_miss[b]] <-  Kd*(mata_means[(c_mata_miss[b]-1)]- MeansC[[1]][(c_mata_miss[b])-1]) + MeansC[[1]][(c_mata_miss[b])]
}
}
return(mata_means)
}
#' @title regressimp
#' @description run regression on M imputed data set, combinging as Rubin's rules
#' @details This is approach followed from  norm2 user manual
#' @param dataf data-frame
#' @param regmodel regression model specfication
#' @return estimates of regression coefficients
#' @example
#' \dontrun{
#' regressimp(impdataset,"fev.12~treat+base")
#' }
regressimp <- function(dataf,regmodel)  {
# to get the list
implist1x <- split(dataf,dataf[,"II"])
# so has M elements in list
# can obtain a list of coefficients and their se's from a regression
# declare list for estimates
est.list <- as.list(NULL)
# declare lists for se's
std.err.list <- as.list( NULL )
M<- utils::tail(dataf[,"II"],1)
for( m in 1:M ){
#mod<-lm(fev12~as.factor(treat)+base,data=kmlist1x[[m]] )
#mod<-lm(head12~head_base+sex,data=implist1x[[m]] )
#mod<-lm(HAMD17.TOTAL7~basval+HAMD17.TOTAL6,data=implist1x[[m]] )
mod<-stats::lm(regmodel,data=implist1x[[m]] )
est.list[[m]] <- stats::coef(summary(mod))[,1]
std.err.list[[m]] <- stats::coef(summary(mod))[,2] }
## combine the results by rules of Barnard and Rubin (1999)
## with df.complete = 27, because a paired t-test in a dataset with
## N=28 cases has 27 degrees of freedom
miResult <- norm2::miInference(est.list, std.err.list, df.complete=801)
print(miResult)
}
#' @title analyselist
#' @description find descriptive stats on the  M imputed data set
#' @details select on patient id and find their means etc
#' @param id patient identifier
#' @param datlist imputed dataset of M imputations
#' @param varlist list of derived variables
#' @return printout of descriptve stats
#' @example
#' \dontrun{
#' varlist <- c("fev2","fev4","fev8","fev12","base")
#' analyselist(5017,impdataset,varlist)
#' }
analyselist <-function(id,datlist,varlist) {
datano <- subset(datlist,id==datlist$SNO)
# numbers denote the descriptive stats to display
t(round(pastecs::stat.desc(datano)[,varlist],3)[c(1,9,13,4,8,5),])
}
#' @title AddDelta
#' @description add delta's to imputed values
#' @details adding delta values after wthdrawal
#' @param vec_tst  vector of visit names
#' @param ncovar number covariates
#' @param mata_imp the imputed values (as well as the complete)
#' @param delta vector of delta values for each vist time
#' @return mata_imp the adjusted imputed vaues (and unadjusted non-missing)
#' @example
#' \dontrun{
#' Adddelta(tst2, nocovar_i,mata_new,delta)
#' }
#define function 19/04 to add delta's to imputed values
AddDelta<-function(vec_tst,ncovar,mata_imp,delta)  {
#browser()
# create vector of 1 and 0s
browser()
onezero<-sapply(vec_tst[1:length(vec_tst)-ncovar], function(x) return(mata_imp[1,paste0(x," .missing")]))
# then 1st and last  ,set last0 as last of complete  before the missing values start
lastVisit <- min(which(onezero==1))
# so add appropriate delta to imputed values after last visit
super_delta<-0
for (v in lastVisit:(length(vec_tst)-ncovar)) {
# when dlag used super_delta<- super_delta + delta[v]* dlag[v-1]
# we only increment delta when missing, so skip if non imssing
# 1st row should be same value for all rows in the same pattern group, gives warning othewise
if (mata_imp[1,2+v+1+length(vec_tst)]==1) {
super_delta <- super_delta + delta[v]
}
#browser()
# mata_new values start in col 3 so must add 2 to index
# needs adjusting for when interim case non missing! test dummy missing vars
# jump<-length(vec_tst)
# mata_imp[2+v]<- ifelse(mata_imp[2+v+1+jump]==1,mata_imp[2+v] + super_delta,mata_imp[2+v])
#{
#print(paste0("interim missing, check delta adjustment ",onezero))
mata_imp[2+v] <- mata_imp[2+v] + super_delta
#}
}
return(mata_imp)
}
impdatasetantiMethind <- mimix("antidepressant",c("basval","POOLED.INVESTIGATOR","PATIENT.SEX"),"HAMD17.TOTAL","TREATMENT.NAME","PATIENT.NUMBER","VISIT.NUMBER",100,1,NULL,101,c("jeffreys"),1000,NULL,c("methodvar","referencevar"),c(0.5,0.5,1,1 ))
vec_tst
ncovar
sapply(vec_tst[1:length(vec_tst)-ncovar])
(vec_tst[1:length(vec_tst)-ncovar])
(vec_tst[1:(length(vec_tst)-ncovar)])
#for select  function
#install.packages("dplyr")
#library(dplyr)
# for pivot_wider function
#install.packages("tidyr")
#library("tidyr")
# for emNorm
#install.packages("norm2")
#library(norm2)
# for cholsolve
#install.packages("sparseinv")
#library(sparseinv)
#  for analysis (stat.desc)
#install.packages("pastecs")
#library(pastecs)
# for Amelia
#install.packages("amelia")
#library(amelia)
#' @title LMCF_loop
#' @description process LMCF method
#' @details This is based on Suzie Cro's Stata program
#' @param c_mata_miss vector of missing
#' @param mata_Means fill-in here
#' @return mata_means
LMCF_loop <- function(c_mata_miss,mata_Means)
{
miss_count <- length(c_mata_miss)
mata_means <- mata_Means
for (b in 1:miss_count)  {
if (c_mata_miss[b] > 1) {
mata_means[c_mata_miss[b]] <- mata_means[(c_mata_miss[b]-1)]
}
}
return(mata_means)
}
#' @title CIR_loop
#' @description process CIR method
#' @details This is based on Suzie Cro's Stata program
#' @param c_mata_miss vector of missing
#' @param mata_Means fill-in here
#' @param MeansC fill-in
#' @return mata_means
CIR_loop <- function(c_mata_miss,mata_Means,MeansC)
# mata_S_miss something like [2 3 4] ,so is cc
{
# browser()
miss_count <- length(c_mata_miss)
mata_means <- as.data.frame(mata_Means)
for (b in 1:miss_count)  {
# if 1st col missing then no value before so need to check for that
# note mimix counter just no rows in each patt
# so main looping is over missin fields, ie miss_count
# if 1st col must be ref
if (c_mata_miss[b] ==1) {
#print will cause objectto return
#print(paste0(miss_count))
#for each patt_count (from mimix_group)
#test purposes
#count<-2
# MeansC is list so use [[1]]
mata_means[b] <- MeansC[[1]][b]
} else  {
#filling in column at a time
mata_means[c_mata_miss[b]] = mata_means[(c_mata_miss[b]-1)]+ MeansC[[1]][(c_mata_miss[b])]- MeansC[[1]][(c_mata_miss[b])-1]
}
}
return(mata_means)
}
#' @title Causal_loop
#' @description process Causal method
#' @details This is based on Suzie Cro's Stata program
#' @param c_mata_miss vector of missing
#' @param mata_Means fill-in here
#' @param MeansC fill-in
#' @param  Kd parameter that makes it between J2R and CIR, value 1 equiv to CIR
#' @return mata_means
Causal_loop<- function(c_mata_miss,mata_Means,MeansC,Kd)
{
#browser()
miss_count <- length(c_mata_miss)
mata_means <- as.data.frame(mata_Means)
for (b in 1:miss_count)  {
# if 1st col missing then no value before so need to check for that
# note mimix counter just no rows in each patt
# so main looping is over missin fields, ie miss_count
# if 1st col must be ref
if (c_mata_miss[b] ==1) {
#print will cause objectto return
#print(paste0(miss_count))
#for each patt_count (from mimix_group)
#test purposes
#count<-2
# MeansC is list so use [[1]]
mata_means[b] <- MeansC[[1]][b]
} else  {
#filling in column at a time
# mata_means[c_mata_miss[b]] = mata_means[(c_mata_miss[b]-1)]+ Kd*( MeansC[[1]][(c_mata_miss[b])]- MeansC[[1]][(c_mata_miss[b])-1])
mata_means[c_mata_miss[b]] <-  Kd*(mata_means[(c_mata_miss[b]-1)]- MeansC[[1]][(c_mata_miss[b])-1]) + MeansC[[1]][(c_mata_miss[b])]
}
}
return(mata_means)
}
#' @title regressimp
#' @description run regression on M imputed data set, combinging as Rubin's rules
#' @details This is approach followed from  norm2 user manual
#' @param dataf data-frame
#' @param regmodel regression model specfication
#' @return estimates of regression coefficients
#' @example
#' \dontrun{
#' regressimp(impdataset,"fev.12~treat+base")
#' }
regressimp <- function(dataf,regmodel)  {
# to get the list
implist1x <- split(dataf,dataf[,"II"])
# so has M elements in list
# can obtain a list of coefficients and their se's from a regression
# declare list for estimates
est.list <- as.list(NULL)
# declare lists for se's
std.err.list <- as.list( NULL )
M<- utils::tail(dataf[,"II"],1)
for( m in 1:M ){
#mod<-lm(fev12~as.factor(treat)+base,data=kmlist1x[[m]] )
#mod<-lm(head12~head_base+sex,data=implist1x[[m]] )
#mod<-lm(HAMD17.TOTAL7~basval+HAMD17.TOTAL6,data=implist1x[[m]] )
mod<-stats::lm(regmodel,data=implist1x[[m]] )
est.list[[m]] <- stats::coef(summary(mod))[,1]
std.err.list[[m]] <- stats::coef(summary(mod))[,2] }
## combine the results by rules of Barnard and Rubin (1999)
## with df.complete = 27, because a paired t-test in a dataset with
## N=28 cases has 27 degrees of freedom
miResult <- norm2::miInference(est.list, std.err.list, df.complete=801)
print(miResult)
}
#' @title analyselist
#' @description find descriptive stats on the  M imputed data set
#' @details select on patient id and find their means etc
#' @param id patient identifier
#' @param datlist imputed dataset of M imputations
#' @param varlist list of derived variables
#' @return printout of descriptve stats
#' @example
#' \dontrun{
#' varlist <- c("fev2","fev4","fev8","fev12","base")
#' analyselist(5017,impdataset,varlist)
#' }
analyselist <-function(id,datlist,varlist) {
datano <- subset(datlist,id==datlist$SNO)
# numbers denote the descriptive stats to display
t(round(pastecs::stat.desc(datano)[,varlist],3)[c(1,9,13,4,8,5),])
}
#' @title AddDelta
#' @description add delta's to imputed values
#' @details adding delta values after wthdrawal
#' @param vec_tst  vector of visit names
#' @param ncovar number covariates
#' @param mata_imp the imputed values (as well as the complete)
#' @param delta vector of delta values for each vist time
#' @return mata_imp the adjusted imputed vaues (and unadjusted non-missing)
#' @example
#' \dontrun{
#' Adddelta(tst2, nocovar_i,mata_new,delta)
#' }
#define function 19/04 to add delta's to imputed values
AddDelta<-function(vec_tst,ncovar,mata_imp,delta)  {
#browser()
# create vector of 1 and 0s
browser()
onezero<-sapply(vec_tst[1:(length(vec_tst)-ncovar)], function(x) return(mata_imp[1,paste0(x," .missing")]))
# then 1st and last  ,set last0 as last of complete  before the missing values start
lastVisit <- min(which(onezero==1))
# so add appropriate delta to imputed values after last visit
super_delta<-0
for (v in lastVisit:(length(vec_tst)-ncovar)) {
# when dlag used super_delta<- super_delta + delta[v]* dlag[v-1]
# we only increment delta when missing, so skip if non imssing
# 1st row should be same value for all rows in the same pattern group, gives warning othewise
if (mata_imp[1,2+v+1+length(vec_tst)]==1) {
super_delta <- super_delta + delta[v]
}
#browser()
# mata_new values start in col 3 so must add 2 to index
# needs adjusting for when interim case non missing! test dummy missing vars
# jump<-length(vec_tst)
# mata_imp[2+v]<- ifelse(mata_imp[2+v+1+jump]==1,mata_imp[2+v] + super_delta,mata_imp[2+v])
#{
#print(paste0("interim missing, check delta adjustment ",onezero))
mata_imp[2+v] <- mata_imp[2+v] + super_delta
#}
}
return(mata_imp)
}
impdatasetantiMethind <- mimix("antidepressant",c("basval","POOLED.INVESTIGATOR","PATIENT.SEX"),"HAMD17.TOTAL","TREATMENT.NAME","PATIENT.NUMBER","VISIT.NUMBER",100,1,NULL,101,c("jeffreys"),1000,NULL,c("methodvar","referencevar"),c(0.5,0.5,1,1 ))
#for select  function
#install.packages("dplyr")
#library(dplyr)
# for pivot_wider function
#install.packages("tidyr")
#library("tidyr")
# for emNorm
#install.packages("norm2")
#library(norm2)
# for cholsolve
#install.packages("sparseinv")
#library(sparseinv)
#  for analysis (stat.desc)
#install.packages("pastecs")
#library(pastecs)
# for Amelia
#install.packages("amelia")
#library(amelia)
#' @title LMCF_loop
#' @description process LMCF method
#' @details This is based on Suzie Cro's Stata program
#' @param c_mata_miss vector of missing
#' @param mata_Means fill-in here
#' @return mata_means
LMCF_loop <- function(c_mata_miss,mata_Means)
{
miss_count <- length(c_mata_miss)
mata_means <- mata_Means
for (b in 1:miss_count)  {
if (c_mata_miss[b] > 1) {
mata_means[c_mata_miss[b]] <- mata_means[(c_mata_miss[b]-1)]
}
}
return(mata_means)
}
#' @title CIR_loop
#' @description process CIR method
#' @details This is based on Suzie Cro's Stata program
#' @param c_mata_miss vector of missing
#' @param mata_Means fill-in here
#' @param MeansC fill-in
#' @return mata_means
CIR_loop <- function(c_mata_miss,mata_Means,MeansC)
# mata_S_miss something like [2 3 4] ,so is cc
{
# browser()
miss_count <- length(c_mata_miss)
mata_means <- as.data.frame(mata_Means)
for (b in 1:miss_count)  {
# if 1st col missing then no value before so need to check for that
# note mimix counter just no rows in each patt
# so main looping is over missin fields, ie miss_count
# if 1st col must be ref
if (c_mata_miss[b] ==1) {
#print will cause objectto return
#print(paste0(miss_count))
#for each patt_count (from mimix_group)
#test purposes
#count<-2
# MeansC is list so use [[1]]
mata_means[b] <- MeansC[[1]][b]
} else  {
#filling in column at a time
mata_means[c_mata_miss[b]] = mata_means[(c_mata_miss[b]-1)]+ MeansC[[1]][(c_mata_miss[b])]- MeansC[[1]][(c_mata_miss[b])-1]
}
}
return(mata_means)
}
#' @title Causal_loop
#' @description process Causal method
#' @details This is based on Suzie Cro's Stata program
#' @param c_mata_miss vector of missing
#' @param mata_Means fill-in here
#' @param MeansC fill-in
#' @param  Kd parameter that makes it between J2R and CIR, value 1 equiv to CIR
#' @return mata_means
Causal_loop<- function(c_mata_miss,mata_Means,MeansC,Kd)
{
#browser()
miss_count <- length(c_mata_miss)
mata_means <- as.data.frame(mata_Means)
for (b in 1:miss_count)  {
# if 1st col missing then no value before so need to check for that
# note mimix counter just no rows in each patt
# so main looping is over missin fields, ie miss_count
# if 1st col must be ref
if (c_mata_miss[b] ==1) {
#print will cause objectto return
#print(paste0(miss_count))
#for each patt_count (from mimix_group)
#test purposes
#count<-2
# MeansC is list so use [[1]]
mata_means[b] <- MeansC[[1]][b]
} else  {
#filling in column at a time
# mata_means[c_mata_miss[b]] = mata_means[(c_mata_miss[b]-1)]+ Kd*( MeansC[[1]][(c_mata_miss[b])]- MeansC[[1]][(c_mata_miss[b])-1])
mata_means[c_mata_miss[b]] <-  Kd*(mata_means[(c_mata_miss[b]-1)]- MeansC[[1]][(c_mata_miss[b])-1]) + MeansC[[1]][(c_mata_miss[b])]
}
}
return(mata_means)
}
#' @title regressimp
#' @description run regression on M imputed data set, combinging as Rubin's rules
#' @details This is approach followed from  norm2 user manual
#' @param dataf data-frame
#' @param regmodel regression model specfication
#' @return estimates of regression coefficients
#' @example
#' \dontrun{
#' regressimp(impdataset,"fev.12~treat+base")
#' }
regressimp <- function(dataf,regmodel)  {
# to get the list
implist1x <- split(dataf,dataf[,"II"])
# so has M elements in list
# can obtain a list of coefficients and their se's from a regression
# declare list for estimates
est.list <- as.list(NULL)
# declare lists for se's
std.err.list <- as.list( NULL )
M<- utils::tail(dataf[,"II"],1)
for( m in 1:M ){
#mod<-lm(fev12~as.factor(treat)+base,data=kmlist1x[[m]] )
#mod<-lm(head12~head_base+sex,data=implist1x[[m]] )
#mod<-lm(HAMD17.TOTAL7~basval+HAMD17.TOTAL6,data=implist1x[[m]] )
mod<-stats::lm(regmodel,data=implist1x[[m]] )
est.list[[m]] <- stats::coef(summary(mod))[,1]
std.err.list[[m]] <- stats::coef(summary(mod))[,2] }
## combine the results by rules of Barnard and Rubin (1999)
## with df.complete = 27, because a paired t-test in a dataset with
## N=28 cases has 27 degrees of freedom
miResult <- norm2::miInference(est.list, std.err.list, df.complete=801)
print(miResult)
}
#' @title analyselist
#' @description find descriptive stats on the  M imputed data set
#' @details select on patient id and find their means etc
#' @param id patient identifier
#' @param datlist imputed dataset of M imputations
#' @param varlist list of derived variables
#' @return printout of descriptve stats
#' @example
#' \dontrun{
#' varlist <- c("fev2","fev4","fev8","fev12","base")
#' analyselist(5017,impdataset,varlist)
#' }
analyselist <-function(id,datlist,varlist) {
datano <- subset(datlist,id==datlist$SNO)
# numbers denote the descriptive stats to display
t(round(pastecs::stat.desc(datano)[,varlist],3)[c(1,9,13,4,8,5),])
}
#' @title AddDelta
#' @description add delta's to imputed values
#' @details adding delta values after wthdrawal
#' @param vec_tst  vector of visit names
#' @param ncovar number covariates
#' @param mata_imp the imputed values (as well as the complete)
#' @param delta vector of delta values for each vist time
#' @return mata_imp the adjusted imputed vaues (and unadjusted non-missing)
#' @example
#' \dontrun{
#' Adddelta(tst2, nocovar_i,mata_new,delta)
#' }
#define function 19/04 to add delta's to imputed values
AddDelta<-function(vec_tst,ncovar,mata_imp,delta)  {
#browser()
# create vector of 1 and 0s
#browser()
onezero<-sapply(vec_tst[1:(length(vec_tst)-ncovar)], function(x) return(mata_imp[1,paste0(x," .missing")]))
# then 1st and last  ,set last0 as last of complete  before the missing values start
lastVisit <- min(which(onezero==1))
# so add appropriate delta to imputed values after last visit
super_delta<-0
for (v in lastVisit:(length(vec_tst)-ncovar)) {
# when dlag used super_delta<- super_delta + delta[v]* dlag[v-1]
# we only increment delta when missing, so skip if non imssing
# 1st row should be same value for all rows in the same pattern group, gives warning othewise
if (mata_imp[1,2+v+1+length(vec_tst)]==1) {
super_delta <- super_delta + delta[v]
}
#browser()
# mata_new values start in col 3 so must add 2 to index
# needs adjusting for when interim case non missing! test dummy missing vars
# jump<-length(vec_tst)
# mata_imp[2+v]<- ifelse(mata_imp[2+v+1+jump]==1,mata_imp[2+v] + super_delta,mata_imp[2+v])
#{
#print(paste0("interim missing, check delta adjustment ",onezero))
mata_imp[2+v] <- mata_imp[2+v] + super_delta
#}
}
return(mata_imp)
}
impdatasetantiMethind <- mimix("antidepressant",c("basval","POOLED.INVESTIGATOR","PATIENT.SEX"),"HAMD17.TOTAL","TREATMENT.NAME","PATIENT.NUMBER","VISIT.NUMBER",100,1,NULL,101,c("jeffreys"),1000,NULL,c("methodvar","referencevar"),c(0.5,0.5,1,1 ))
View(impdatasetantiMethind)
regressimp(impdatasetantiMethind,"HAMD17.TOTAL.7~TREATMENT.NAME+basval+POOLED.INVESTIGATOR+PATIENT.SEX")
impdatasetanticausal <- mimix("antidepressant",c("basval","POOLED.INVESTIGATOR","PATIENT.SEX"),"HAMD17.TOTAL","TREATMENT.NAME","PATIENT.NUMBER","VISIT.NUMBER",100,1,"Causal",101,c("jeffreys"),1000,NULL,NULL)
